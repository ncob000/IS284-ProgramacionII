#include <cstdio>
#include <iostream>

void MostrarDatos(int vector[], int length);
void ordIntercambio(int a[], int n);
void ordSeleccion(int a[], int n);
void ordInsercion(int a[], int n);
void ordBurbuja(int a[], int n);
void ordenacionShell(int a[], int n);
void quicksort(int a[], int primero, int ultimo);

int main()
{
    // Vector a ordenar, 52 numeros enteros en index aleatorios
    int VectorRandom[] = {31, 5, 0, 50, 28, 24, 8, 46, 15, 19,
                          33, 20, 43, 12, 26, 25, 48, 9, 40, 32,
                          27, 4, 49, 45, 18, 44, 10, 38, 37, 35,
                          23, 51, 39, 7, 21, 34, 17, 41, 13, 29,
                          22, 52, 36, 42, 1, 14, 16, 47, 11, 30, 6, 3};

    // Presentacion de datos:
    printf("\nDatos desordenados del vector: \n\n");
    MostrarDatos(VectorRandom, 52);
    printf("\n\nOrdenamiento por intercambio (bubble sort):\n\n");
    ordIntercambio(VectorRandom, 52);
    printf("\n\nOrdenamiento por seleccion   (selection sort):\n\n");
    ordSeleccion(VectorRandom, 52);
    printf("\n\nOrdenamiento por inserccion  (insertion sort)\n\n");
    ordInsercion(VectorRandom, 52);
    printf("\n\nOrdenamiento burbuja:\n\n");
    ordBurbuja(VectorRandom, 52);
    printf("\n\nOrdenamiento shell: \n\n");
    ordenacionShell(VectorRandom, 52);
    printf("\n\nOrdenamiento rapido (quik sort): \n\n");
    quicksort(VectorRandom, 0, 52);

    return 0;
;;; Personal configuration -*- lexical-binding: t -*-

;; Save the contents of this file under ~/.emacs.d/init.el
;; Do not forget to use Emacs' built-in help system:
;; Use C-h C-h to get an overview of all help commands.  All you
;; need to know about Emacs (what commands exist, what functions do,
;; what variables specify), the help system can provide.

;; Add the NonGNU ELPA package archive
(require 'package)
(add-to-list 'package-archives  '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
(unless package-archive-contents  (package-refresh-contents))

;; Load a custom theme
(load-theme 'wombat t)

;; Disable the menu bar
(menu-bar-mode -1)

;;; Completion framework
(unless (package-installed-p 'vertico)
  (package-install 'vertico))

;; Enable completion by narrowing
(vertico-mode t)

;; Enable horizontal completion
(vertico-flat-mode t)

;; Improve directory navigation
(with-eval-after-load 'vertico
  (define-key vertico-map (kbd "RET") #'vertico-directory-enter)
  (define-key vertico-map (kbd "DEL") #'vertico-directory-delete-word)
  (define-key vertico-map (kbd "M-d") #'vertico-directory-delete-char))

;;; Extended completion utilities
(unless (package-installed-p 'consult)
  (package-install 'consult))
(global-set-key [rebind switch-to-buffer] #'consult-buffer)
(global-set-key (kbd "C-c j") #'consult-line)
(global-set-key (kbd "C-c i") #'consult-imenu)

;; Enable line numbering in `prog-mode'
(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Automatically pair parentheses
(electric-pair-mode t)

;;; LSP Support
(unless (package-installed-p 'eglot)
  (package-install 'eglot))

;; Enable LSP support by default in programming buffers
(add-hook 'prog-mode-hook #'eglot-ensure)

;; Create a memorable alias for `eglot-ensure'.
(defalias 'start-lsp-server #'eglot)

;;; Inline static analysis

;; Enabled inline static analysis
(add-hook 'prog-mode-hook #'flymake-mode)

;; Display messages when idle, without prompting
(setq help-at-pt-display-when-idle t)

;; Message navigation bindings
(with-eval-after-load 'flymake
  (define-key flymake-mode-map (kbd "C-c n") #'flymake-goto-next-error)
  (define-key flymake-mode-map (kbd "C-c p") #'flymake-goto-prev-error))

;;; Pop-up completion
(unless (package-installed-p 'corfu)
  (package-install 'corfu))

;; Enable autocompletion by default in programming buffers
(add-hook 'prog-mode-hook #'corfu-mode)

;; Enable automatic completion.
(setq corfu-auto t)

;;; Git client
(unless (package-installed-p 'magit)
  (package-install 'magit))

;; Bind the `magit-status' command to a convenient key.
(global-set-key (kbd "C-c g") #'magit-status)

;;; Indication of local VCS changes
(unless (package-installed-p 'diff-hl)
  (package-install 'diff-hl))

;; Enable `diff-hl' support by default in programming buffers
(add-hook 'prog-mode-hook #'diff-hl-mode)

;;; Ada Support
(unless (package-installed-p 'ada-mode)
  (package-install 'ada-mode))

;;; Clojure Support
(unless (package-installed-p 'clojure-mode)
  (package-install 'clojure-mode))

;;; Coq Support
(unless (package-installed-p 'proof-general)
  (package-install 'proof-general))

;;; C# Support
(unless (package-installed-p 'csharp-mode)
  (package-install 'csharp-mode))

;;; D Support
(unless (package-installed-p 'd-mode)
  (package-install 'd-mode))

;;; Elixir Support
(unless (package-installed-p 'elixir-mode)
  (package-install 'elixir-mode))

;;; Go Support
(unless (package-installed-p 'go-mode)
  (package-install 'go-mode))

;;; Haskell Support
(unless (package-installed-p 'haskell-mode)
  (package-install 'haskell-mode))

;;; J Support
(unless (package-installed-p 'j-mode)
  (package-install 'j-mode))

;;; JSON Support
(unless (package-installed-p 'json-mode)
  (package-install 'json-mode))

;;; Julia Support
(unless (package-installed-p 'julia-mode)
  (package-install 'julia-mode))

;;; Kotlin Support
(unless (package-installed-p 'kotlin-mode)
  (package-install 'kotlin-mode))

;;; Lua Support
(unless (package-installed-p 'lua-mode)
  (package-install 'lua-mode))

;;; NASM Support
(unless (package-installed-p 'nasm-mode)
  (package-install 'nasm-mode))

;;; PHP Support
(unless (package-installed-p 'php-mode)
  (package-install 'php-mode))

;;; Raku Support
(unless (package-installed-p 'raku-mode)
  (package-install 'raku-mode))

;;; Rust Support
(unless (package-installed-p 'rust-mode)
  (package-install 'rust-mode))

;;; Scala Support
(unless (package-installed-p 'scala-mode)
  (package-install 'scala-mode))

;;; Additional Lisp support
(unless (package-installed-p 'sly)
  (package-install 'sly))

;;; Standard ML Support
(unless (package-installed-p 'sml-mode)
  (package-install 'sml-mode))

;;; Swift Support
(unless (package-installed-p 'swift-mode)
  (package-install 'swift-mode))

;;; Typescript Support
(unless (package-installed-p 'typescript-mode)
  (package-install 'typescript-mode))

;;; YAML Support
(unless (package-installed-p 'yaml-mode)
  (package-install 'yaml-mode))

;;; SWI-Prolog Support
(unless (package-installed-p 'sweeprolog)
  (package-install 'sweeprolog))

;; Use `sweeprolog-mode' instead of `prolog-mode'
(add-to-list 'auto-mode-alist '("\.plt?\'"  . sweeprolog-mode))

;;; LaTeX support
(unless (package-installed-p 'auctex)
  (package-install 'auctex))
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

;; Enable LaTeX math support
(add-hook 'LaTeX-mode-map #'LaTeX-math-mode)

;; Enable reference mangment
(add-hook 'LaTeX-mode-map #'reftex-mode)

;;; Markdown support
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode))

;;; Outline-based notes management and organizer
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)

;;; Additional Org-mode related functionality
(unless (package-installed-p 'org-contrib)
  (package-install 'org-contrib))

;;; EditorConfig support
(unless (package-installed-p 'editorconfig)
  (package-install 'editorconfig))

;; Enable EditorConfig
(editorconfig-mode t)

;;; In-Emacs Terminal Emulation
(unless (package-installed-p 'eat)
  (package-install 'eat))

;; Close the terminal buffer when the shell terminates.
(setq eat-kill-buffer-on-exit t)

;; Enable mouse-support.
(setq eat-enable-mouse t)

;;; Jump to arbitrary positions
(unless (package-installed-p 'avy)
  (package-install 'avy))
(global-set-key (kbd "C-c z") #'avy-goto-word-1)

;; Miscellaneous options
(setq-default major-mode
              (lambda () ; guess major mode from file name
                (unless buffer-file-name
                  (let ((buffer-file-name (buffer-name)))
                    (set-auto-mode)))))
(setq confirm-kill-emacs #'yes-or-no-p)
(setq window-resize-pixelwise t)
(setq frame-resize-pixelwise t)
(save-place-mode t)
(savehist-mode t)
(recentf-mode t)
(defalias 'yes-or-no #'y-or-n-p)

;; Store automatic customisation options elsewhere
(setq custom-file (locate-user-emacs-file "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))}

/**
 * @brief Mostrar datos ordenados de un vector
 *
 * Este procedimiento recibe un vector organizado y el tamaño del mismo e imprime cada
 * elemento del vector
 *
 * @param vector vector ordenado
 * @param length tamaño del vector
 */
void MostrarDatos(int vector[], int length)
{
    for (int i = 0; i < length; i++)
    {
        printf("%d, ", vector[i]);
    }
}
/**
 * @brief Ordena un arreglo de enteros utilizando el algoritmo de intercambio (ordenación de burbuja).
 *
 * Esta función ordena el arreglo de enteros 'a' en orden ascendente utilizando el algoritmo de intercambio.
 *
 * @param a Un arreglo de enteros que se ordenará.
 * @param n El número de elementos en el arreglo.
 */
void ordIntercambio(int a[], int n)
{
    int i, j;
    // Se realizan n−1 pasadas a través del arreglo.
    // Los elementos a[0] hasta a[n-2] se ordenan en cada pasada.
    for (i = 0; i <= n - 2; i++)
        /* coloca mínimo de a[i+1]...a[n-1] en a[i] */
        for (j = i + 1; j <= n - 1; j++)
            if (a[i] > a[j])
            {
                // Realiza intercambio de elementos
                int aux;
                aux = a[i];
                a[i] = a[j];
                a[j] = aux;
            }

    // muestra los datos ordenados
    MostrarDatos(a, n);
}

void ordSeleccion(int a[], int n)
{
    int indiceMenor, i, j;
    /* ordenar a[0]..a[n-2] y a[n-1] en cada pasada */
    for (i = 0; i < n - 1; i++)
    {
        /* comienzo de la exploración en índice i */
        indiceMenor = i;
        /* j explora la sublista a[i+1]..a[n-1] */
        for (j = i + 1; j < n; j++)
            if (a[j] < a[indiceMenor])
                indiceMenor = j;
        /* sitúa el elemento más pequeño en a[i] */
        if (i != indiceMenor)
        {
            int aux = a[i];
            a[i] = a[indiceMenor];
            a[indiceMenor] = aux;
        }
    }
    MostrarDatos(a, n);
}


void ordInsercion(int a[], int n)
{
    int i, j;
    int aux;
    for (i = 1; i < n; i++)
    {
        /* índice j explora la sublista a[i-1]..a[0] buscando la
        posición correcta del elemento destino, lo asigna a a[j] */
        j = i;
        aux = a[i];
        /* se localiza el punto de inserción explorando hacia abajo */
        while (j > 0 && aux < a[j - 1])
        {
            /* desplazar elementos hacia arriba para hacer espacio */
            a[j] = a[j - 1];
            j--;
        }
        a[j] = aux;
    }
    MostrarDatos(a, n);
}

void ordBurbuja(int a[], int n)
{
    int interruptor = 1;
    int pasada, j;
    for (pasada = 0; pasada < n - 1 && interruptor; pasada++)
    {
        /* bucle externo controla la cantidad de pasadas */
        interruptor = 0;
        for (j = 0; j < n - pasada - 1; j++)
            if (a[j] > a[j + 1])
            {
                /* elementos desordenados, es necesario intercambio */
                long aux;
                interruptor = 1;
                aux = a[j];
                a[j] = a[j + 1];
                a[j + 1] = aux;
            }
    }

    MostrarDatos(a, n);
}

void ordenacionShell(int a[], int n)
{
    int intervalo, i, j, k;
    intervalo = n / 2;
    while (intervalo > 0)
    {
        for (i = intervalo; i < n; i++)
        {
            j = i - intervalo;
            while (j >= 0)
            {
                k = j + intervalo;
                if (a[j] <= a[k])
                    j = -1;
                /* así termina el bucle, par ordenado */
                else
                {
                    double temp;
                    temp = a[j];
                    a[j] = a[k];
                    a[k] = temp;
                    j -= intervalo;
                }
            }
        }
        intervalo = intervalo / 2;
    }
    MostrarDatos(a, n);
}

// Algoritmo quiksort

void quicksort(int a[], int primero, int ultimo)
{
    int i, j, central;
    double pivote;
    central = (primero + ultimo) / 2;
    pivote = a[central];
    i = primero;
    j = ultimo;
    do
    {
        while (a[i] < pivote)
            i++;
        while (a[j] > pivote)
            j--;
        if (i <= j)
        {
            double tmp;
            tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
            /* intercambia a[i] con a[j] */
            i++;
            j--;
        }
    } while (i <= j);

    MostrarDatos(a, ultimo);
}
